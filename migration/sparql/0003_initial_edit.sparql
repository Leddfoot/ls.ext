# 1) Merge some locationCategory codes into locationFormat

SPARQL
PREFIX : <http://data.deichman.no/ontology#>
PREFIX migration: <http://migration.deichman.no/>

WITH <http://deichman.no/migration>

MODIFY

DELETE {
  ?publication :locationFormat ?format .
}

INSERT {
  ?publication :locationFormat `concat(str(?category),str(?format))` .
}

WHERE {
  ?publication migration:locationCategory ?category ;
    a :Publication .
  OPTIONAL {?publication :locationFormat ?format .}
  VALUES ?category {"a" "BI"}
}
;


# 2) Create locationFormat CD from category when format is missing

SPARQL
PREFIX : <http://data.deichman.no/ontology#>
PREFIX migration: <http://migration.deichman.no/>

WITH <http://deichman.no/migration>

INSERT {
  ?publication :locationFormat "CD" .
}

WHERE {
  ?publication migration:locationCategory "dc" ;
    a :Publication .
  MINUS {?publication :locationFormat ?format .}
}
;


# 3) Add parent titles

SPARQL
PREFIX : <http://data.deichman.no/ontology#>
PREFIX migration: <http://migration.deichman.no/>

WITH <http://deichman.no/migration>

INSERT {
	?publication :mainTitle ?title .
}

WHERE {
	?publication migration:parentRecordTitle ?title .
	MINUS {?publication :mainTitle ?o .}
}
;


# 4) Add main titles from parent records

SPARQL
PREFIX : <http://data.deichman.no/ontology#>
PREFIX migration: <http://migration.deichman.no/>

WITH <http://deichman.no/migration>

INSERT {
	?publication :mainTitle ?title .
}

WHERE {
	?publication migration:parentRecordId ?id .
	MINUS {?publication :mainTitle ?o .}
	?parent :recordId ?id ;
		:mainTitle ?title .
}
;


# 5) Construct music cd classification with source

SPARQL
PREFIX : <http://data.deichman.no/ontology#>
PREFIX migration: <http://migration.deichman.no/>
PREFIX raw: <http://data.deichman.no/raw#>

WITH <http://deichman.no/migration>

INSERT {
	?publication migration:classification `IRI(CONCAT("http://data.deichman.no/classification/x", MD5(STR(?notation))))` .
	`IRI(CONCAT("http://data.deichman.no/classification/x", MD5(STR(?notation))))` raw:classificationNotation ?notation ;
		raw:classificationNotation "cdclass" .
}

WHERE {
	?publication migration:musicClass ?notation .
	FILTER (!REGEX(?notation, "^[\\d]{3}"))
}
;


# 6) Construct music dewey classification

SPARQL
PREFIX : <http://data.deichman.no/ontology#>
PREFIX migration: <http://migration.deichman.no/>
PREFIX raw: <http://data.deichman.no/raw#>

WITH <http://deichman.no/migration>

INSERT {
	?publication migration:classification `IRI(CONCAT("http://data.deichman.no/classification/x", MD5(STR(?notation))))` .
	`IRI(CONCAT("http://data.deichman.no/classification/x", MD5(STR(?notation))))` raw:classificationNotation ?notation .
}

WHERE {
	?publication migration:musicClass ?notation .
	FILTER (REGEX(?notation, "^[\\d]{3}"))
}
;


# 7) Delete obsolete fiction language classification

SPARQL
PREFIX : <http://data.deichman.no/ontology#>
PREFIX migration: <http://migration.deichman.no/>
PREFIX raw: <http://data.deichman.no/raw#>

WITH <http://deichman.no/migration>

DELETE {
	?publication migration:classification ?class .
	?class ?p ?o
}

WHERE {
	?class raw:classificationNotation ?notation ;
		?p ?o .
	FILTER (REGEX(?notation, "^[\\d]{2}\\."))
	?publication migration:classification ?class ;
		a :Publication
}
;


# 7) Remove format toBeDeleted where other format is present

SPARQL
PREFIX : <http://data.deichman.no/ontology#>
PREFIX format: <http://data.deichman.no/format#>

WITH <http://deichman.no/migration>

DELETE {
	?publication :format format:toBeDeleted .
}

WHERE {
	?publication :format format:toBeDeleted ;
		a :Publication ;
		:format ?format .
	FILTER (?format != format:toBeDeleted && ?format != format:E-book)
}
;



# 8) Remove contentAdaptation mapped as formatAdaptation

SPARQL
PREFIX : <http://data.deichman.no/ontology#>
PREFIX format: <http://data.deichman.no/format#>
PREFIX adaptation: <http://data.deichman.no/formatAdaptation#>

WITH <http://deichman.no/migration>

DELETE {
	?publication :hasFormatAdaptation ?adaptation .
}

WHERE {
	?publication :hasFormatAdaptation ?adaptation ;
		a :Publication .
	VALUES ?adaptation {adaptation:ta adaptation:tb}
}
;



# 9) Remove formatAdaptation mapped as contentAdaptation

SPARQL
PREFIX : <http://data.deichman.no/ontology#>
PREFIX format: <http://data.deichman.no/format#>
PREFIX adaptation: <http://data.deichman.no/contentAdaptation#>

WITH <http://deichman.no/migration>

DELETE {
	?publication :hasContentAdaptation ?adaptation .
}

WHERE {
	?publication :hasContentAdaptation ?adaptation ;
		a :Publication .
	VALUES ?adaptation {adaptation:tc adaptation:td adaptation:te adaptation:tf adaptation:tg adaptation:tj}
}
;

